import { Injectable, UnauthorizedException } from '@nestjs/common';
import { Request } from 'express';
import { checkFreePath } from './common/tool';
import { checkTokenRequest, processEventPath, processMainRequest } from './common/functions';

// TODO : STRIPE EVENT
// TODO : ‚ö†Ô∏è Upgrade logique for free path, for the moment only auth login and register is accepted

/**
 * @method processRequest
 * @description
 * Route automatiquement une requ√™te entrante vers le microservice appropri√©, en fonction de son URL.
 *
 * üîí Si la route est prot√©g√©e :
 * - V√©rifie la pr√©sence et la validit√© du token via le service d'authentification
 * - En cas de succ√®s, transmet la requ√™te au microservice concern√©
 *
 * üîì Si la route est libre (ex: login, register) :
 * - Appelle directement le service d‚Äôauthentification sans v√©rification du token
 *
 * @param {Request} req - Requ√™te HTTP entrante (provenant de l'utilisateur)
 * @returns {Promise<any>} - R√©sultat de la requ√™te transmise au microservice cible
 *
 * @throws {UnauthorizedException} - Si aucun token n'est fourni ou si le token est invalide
 *
 * @example
 * // Requ√™te vers une route publique :
 * processRequest(req); // redirig√©e sans auth vers /auth/login
 *
 * // Requ√™te vers une route prot√©g√©e :
 * processRequest(req); // n√©cessite un token valide
 */

@Injectable()
export class ProxyService {
  async processRequest(req: Request) {
    // STRIPE WEB HOOK EVENT'S
    if (req.url === '/stripe/event') {
      return await processEventPath(req);
    } else {
      // REVERSE PROXY
      if (checkFreePath(req.url)) {
        // Check Token
        return checkTokenRequest(req);
      } else {
        if (req.headers.authorization) {
          // Process request
          return processMainRequest(req);
        } else {
          throw new UnauthorizedException('Invalid token');
        }
      }
    }
  }
}
