version: '3.8'

services:

  # üêá Message BROKER
  broker-service:
    image: rabbitmq:4.0-management
    container_name: broker-service
    restart: always

    ports:
      - '127.0.0.1:15672:15672' # UI admin en local uniquement
    healthcheck:
      test: [ "CMD", "rabbitmq-diagnostics", "-q", "ping" ]
      interval: 5s
      timeout: 5s
      retries: 20
    networks:
      - public
      - private_net

  # ------------------------------------------------------------
  # ----------------------- üóÑÔ∏è DATABASES -----------------------
  # ------------------------------------------------------------

  # üîí AUTH DB (Priv√©)
  mysql-auth:
    image: mysql:8
    container_name: mysql-auth
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: password
      MYSQL_DATABASE: auth-db
    volumes:
      - mysql-auth-data:/var/lib/mysql
    healthcheck:
      test: [ 'CMD', 'mysqladmin', 'ping', '-h', 'localhost', '-ppassword' ]
      interval: 5s
      timeout: 3s
      retries: 20
    networks:
      - private_net

  # üé© PRODUCT DB (Priv√©)
  mysql-product:
    image: mysql:8.0
    container_name: mysql-product
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: password
      MYSQL_DATABASE: product-db
    volumes:
      - mysql-prod-data:/var/lib/mysql
      - ./init:/docker-entrypoint-initdb.d
    healthcheck:
      test: [ "CMD", "mysqladmin", "ping", "-h", "127.0.0.1", "-ppassword" ]
      interval: 5s
      timeout: 5s
      retries: 20
    networks:
      - private_net

  mysql-config:
    image: mysql:8
    container_name: mysql-config
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: password
      MYSQL_DATABASE: config-db
    volumes:
      - mysql-config-data:/var/lib/mysql
    healthcheck:
      test: [ 'CMD', 'mysqladmin', 'ping', '-h', 'localhost', '-ppassword' ]
      interval: 5s
      timeout: 3s
      retries: 20
    networks:
      - private_net

  # üí∂ FACTURATION DB (Priv√©)
  mysql-facturation:
    image: mysql:8
    container_name: mysql-facturation
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: password
      MYSQL_DATABASE: facturation-db
    volumes:
      - mysql-facturation-data:/var/lib/mysql
    healthcheck:
      test: [ 'CMD', 'mysqladmin', 'ping', '-h', 'localhost', '-ppassword' ]
      interval: 5s
      timeout: 3s
      retries: 20
    networks:
      - private_net

  # üöö DELIVERY DB (Priv√©)
  mysql-delivery:
    image: mysql:8
    container_name: mysql-delivery
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: password
      MYSQL_DATABASE: delivery-db
    volumes:
      - mysql-delivery-data:/var/lib/mysql
    healthcheck:
      test: [ 'CMD', 'mysqladmin', 'ping', '-h', 'localhost', '-ppassword' ]
      interval: 5s
      timeout: 3s
      retries: 20
    networks:
      - private_net

  # üìä Adminer ‚Äî DB Observer
  adminer:
    image: adminer
    container_name: adminer
    restart: always
    ports:
      - "8081:8080"
    networks:
      - public
      - private_net

  # ------------------------------------------------------------
  # ----------------------- Services ---------------------------
  # ------------------------------------------------------------

  # üîí AUTH SERVICE (Priv√©) # Issue run container, cpy nodemodule , try to fix it later
  auth-service:
    build: ./auth-service
    container_name: auth-service
    restart: always
    env_file:
      - ./auth-service/.env
    volumes:
      - ./auth-service:/auth-service
      - /auth-service/node_modules
    depends_on:
      mysql-auth:
        condition: service_healthy
    networks:
      - private_net

  # üé© PRODUCT SERVICE (Priv√©)
  product-service:
    build: ./product-service
    container_name: product-service
    restart: unless-stopped
    working_dir: /product-service
    env_file:
      - ./product-service/.env
    volumes:
      - ./product-service:/product-service
      - /product-service/node_modules
    depends_on:
      mysql-product:
        condition: service_healthy
    networks:
      - private_net

  # üõ†Ô∏è CONFIG SERVICE (Priv√©)
  config-service:
    build: ./config-service
    container_name: config-service
    restart: always
    env_file:
      - ./config-service/.env
    volumes:
      - ./config-service:/config-service
      - /config-service/node_modules
    depends_on:
      mysql-config:
        condition: service_healthy
    networks:
      - private_net

  # üí∂ FACTURATION SERVICE (Priv√©)
  facturation-service:
    build: ./facturation-service
    container_name: facturation-service
    restart: always
    env_file:
      - ./facturation-service/.env
    volumes:
      - ./facturation-service:/facturation-service
      - /facturation-service/node_modules
    depends_on:
      mysql-facturation:
        condition: service_healthy
    networks:
      - private_net

  # üöö DELIVERY SERVICE (Priv√©)
  delivery-service:
    build: ./delivery-service
    container_name: delivery-service
    restart: always
    env_file:
      - ./delivery-service/.env
    volumes:
      - ./delivery-service:/delivery-service
      - /delivery-service/node_modules
    depends_on:
      mysql-delivery:
        condition: service_healthy
    networks:
      - private_net

  # üì¨ Mail SERVICE (Priv√©)
  mail-service:
    build: ./mail-service
    container_name: mail-service
    restart: always
    env_file:
      - ./mail-service/.env
    volumes:
      - ./mail-service:/mail-service
      - /mail-service/node_modules
    depends_on:
      broker-service:
        condition: service_healthy
    networks:
      - private_net

  # üöÄ API GATEWAY
  api-gateway:
    build: ./api-gateway
    container_name: api-gateway
    restart: always
    ports:
      - '2999:2999'
    volumes:
      - ./api-gateway:/api-gateway
      - /api-gateway/node_modules
    depends_on:
      auth-service:
        condition: service_started
      product-service:
        condition: service_started
      config-service:
        condition: service_started
      facturation-service:
        condition: service_started
      delivery-service:
        condition: service_started
      mail-service:
        condition: service_started
      broker-service:
        condition: service_healthy
    networks:
      - public
      - private_net

  # üåç FRONT-END
  front-app:
    build: ./front-app
    container_name: front-app
    ports:
      - '3000:3000'
    volumes:
      - ./front-app:/front-app
      - /front-app/node_modules
    stdin_open: true
    tty: true
    depends_on:
      api-gateway:
        condition: service_started
    networks:
      - public

volumes:
  mysql-auth-data:
  mysql-prod-data:
  mysql-config-data:
  mysql-facturation-data:
  mysql-delivery-data:

networks:
  public:
    driver: bridge
  private_net:
    driver: bridge
    internal: true
